/**
 * 给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。
 * 例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，
 * 那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 
 * 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： 
 * {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， 
 * {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。
 */
function maxInWindows(num, size)
{
    // write code here
    if(!num.length || num.length < size) return [];
    let result = [], q = [];
    for(let i = 0; i < num.length; i++){
        //从后面依次弹出队列中比当前num值小的元素，同时也能保证队列首元素为当前窗口最大值下标
        while(q.length && num[q[q.length - 1]] <= num[i]){
            q.pop();
        }
        //当当前窗口移出队首元素所在的位置，即队首元素坐标对应的num不在窗口中，需要弹出
        if(q.length && i - q[0] + 1 > size){
            q.shift();
        }
        //把每次滑动的num下标加入队列
        q.push(i)
        ///当滑动窗口首地址i大于等于size时才开始写入窗口最大值
        if(size && i + 1 >= size)
            result.push(num[q[0]]);
    }
    return result;
}