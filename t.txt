1.盒子模型
CSS css盒子模型 又称框模型 (Box Model) ，包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）
几个要素。

两个上下方向相邻的元素框垂直相遇时，外边距会合并，合并后的外边距的高度等于两个发生合并的外边距中较高的那个边距值

box-sizing属性介绍
box-sizing属性是用户界面属性里的一种，之所以介绍它，是因为这个属性跟盒子模型有关，而且在css reset中有可能会用到它。
box-sizing : content-box|border-box|inherit;
1) content-box ,默认值，可以使设置的宽度和高度值应用到元素的内容框。盒子的width只包含内容。
　　即总宽度=margin+border+padding+width
(2) border-box , 设置的width值其实是除margin外的border+padding+element的总宽度。盒子的width包含border+padding+内容
　　　　即总宽度=margin+width
很多CSS框架，都会对盒子模型的计算方法进行简化。

2.垃圾回收
Js具有自动垃圾回收机制。垃圾收集器会按照固定的时间间隔周期性的执行。
JS垃圾回收方式
Javascript采用标记-清除为主（高版本浏览器），引用计数为辅的策略（低版本IE）
1.    标记清除
工作原理：是当变量进入环境时，将这个变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的就回收内存。

工作流程：

    1.    垃圾回收器，在运行的时候会给存储在内存中的所有变量都加上标记。

    2.    去掉环境中的变量以及被环境中的变量引用的变量的标记。

    3.    再被加上标记的会被视为准备删除的变量。

    4.    垃圾回收器完成内存清除工作，销毁那些带标记的值并回收他们所占用的内存空间。

2.    引用计数
工作原理：跟踪记录每个值被引用的次数。

工作流程：

    1.    声明了一个变量并将一个引用类型的值赋值给这个变量，这个引用类型值的引用次数就是1。

    2.    同一个值又被赋值给另一个变量，这个引用类型值的引用次数加1.

    3.    当包含这个引用类型值的变量又被赋值成另一个值了，那么这个引用类型值的引用次数减1.

    4.    当引用次数变成0时，说明没办法访问这个值了。

    5.    当垃圾收集器下一次运行时，它就会释放引用次数是0的值所占的内存

3.eventLoop
JavaScript语言为例，它是一种单线程语言，所有任务都在一个线程上完成。
一旦遇到大量任务或者遇到一个耗时的任务，网页就会出现"假死"，因为JavaScript停不下来，也就无法响应用户的行为。

在程序中设置两个线程：一个负责程序本身的运行，称为"主线程"；另一个负责主线程与其他进程（主要是各种I/O操作）的通信，
被称为"Event Loop线程"（可以译为"消息线程"）
所以主线程得以运行更多的任务，这就提高了效率。
这种运行方式称为"异步模式"（asynchronous I/O）或"非堵塞模式"（non-blocking mode）。
4.双向绑定
 var obj = {};
Object.defineProperty(obj,'hello',{
enumerable: true,
configurable: true,
get: function() { return document.getElementById('aa').value; },
set:function(val){
document.getElementById('bb').innerHTML = val*obj.hello2;
}
});

document.getElementById('aa').onkeyup = function(){
 obj.hello = this.value;
};

obj.hello = "";

5.从输入URL到浏览器显示页面发生了什么
    1)解析URL 2)DNS解析 3)浏览器与网站建立TCP连接（三次握手） 4)请求和传输数据
    5)浏览器渲染页面. 构造dom树、构建渲染树，根据dom树和css树绘制渲染树

6.前端如何跨域拿到cookie
比如本地域名是aaa.com，但是接口用的是bbb.com的，所以现在后端传回来的cookie也在bbb.com上面
由于浏览器限制，前端不能拿到跨域 cookie 。 你需要让后端加上请求头。只能跨域成功，发送和接受时携带cookie。而不能通过js获取cookie。

Access-Control-Allow-Origin: http://aaa.com
Access-Control-Allow-Credentials: true
Access-Control-Allow-Headers: Content-Type, Set-Cookie, *



6.
async function async1() {
    console.log("async1 start");
    await async2();
    console.log("async1 end");
}

async function async2() {
    console.log("async2");
}

console.log("script start");

setTimeout(function() {
    console.log("setTimeout");
}, 0);

async1();

new Promise(function(resolve) {
    console.log("promise1");
    resolve();
}).then(function() {
    console.log("promise2");
});

console.log("script end");

输出：
console.log("script end");
script start
async1 start
async2
promise1
script end
async1 end
promise2
setTimeout

6. 获取url参数
function getQueryString(name) {
        var reg = new RegExp("[?|&]" + name + "=([^&]*)(&|$)", "i");
        var r = window.location.search.match(reg);
        return r ? decodeURIComponent(r[1]) : '';
    }

7.获取cookie
function getCookieByName(name) {
    for (let cookie of document.cookie.split('; ')) {
        const [key, value] = cookie.split('=')
        if (key === name) {
            return decodeURIComponent(value)
        }
    }

    return ''
}
function getCookies() {
    let cookies = {}

    for (let cookie of document.cookie.split('; ')) {
        let [name, value] = cookie.split('=')
        cookies[name] = decodeURIComponent(value)
    }

    return cookies
}

function addCookie(name, value, days) {
    let expires
    if (days) {
        let date = new Date()
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))
        expires = '; expires=' + date.toUTCString()
    } else {
        expires = ''
    }
    document.cookie = name + '=' + encodeURIComponent(value) + expires + '; path=/'
}

function removeCookieByName(name) {
    addCookie(name, '', -1)
}

8.CORS是W3c工作草案，它定义了在跨域访问资源时浏览器和服务器之间如何通信。
CORS背后的基本思想是使用自定义的HTTP头部允许浏览器和服务器相互了解对方，从而决定请求或响应成功与否。
  同源策略：是浏览器最核心也最基本的安全功能；
  同源指的是：同协议，同域名和同端口。精髓：认为自任何站点装载的信赖内容是不安全的。
  当被浏览器半信半疑的脚本运行在沙箱时，它们应该只被允许访问来自同一站点的资源，
  而不是那些来自其它站点可能怀有恶意的资源；

  Access-Control-Allow-Origin:指定授权访问的域
  Access-Control-Allow-Methods：授权请求的方法（GET, POST, PUT, DELETE，OPTIONS等)

  CORS 对比 JSONP
  都能解决 Ajax直接请求普通文件存在跨域无权限访问的问题

  JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求
  使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理
  JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS

9.js 堆栈
1、基本类型

         基本类型有Undefined、Null、Boolean、Number 和String。
         这些类型在内存中分别占有固定大小的空间，他们的值保存在栈空间，我们通过按值来访问的。

2、引用类型

       引用类型，值大小不固定，栈内存中存放地址指向堆内存中的对象。是按引用访问的。
       栈内存中存放的只是该对象的访问地址，在堆内存中为这个值分配空间。由于这种值的大小不固定，
       因此不能把它们保存到栈内存中。但内存地址大小的固定的，因此可以将内存地址保存在栈内存中。
        这样，当查询引用类型的变量时， 先从栈中读取内存地址， 然后再通过地址找到堆中的值。
        对于这种，我们把它叫做按引用访问当我们看到一个变量类型是已知的，就分配在栈里面，比如INT,Double等。
        其他未知的类型，比如自定义的类型，因为系统不知道需要多大，所以程序自己申请，这样就分配在堆里面。
        基本类型大小固定，引用类型大小不固定，分开存放使得程序运行占用内存最小。

3、栈内存：存放基本类型。 堆内存：存放引用类型（在栈内存中存一个基本类型值保存对象在堆内存中的地址，用于引用这个对象。）

4、基本类型在当前执行环境结束时销毁，而引用类型不会随执行环境结束而销毁，只有当所有引用它的变量不存在时这个对象才被垃圾回收机制回收。

10.电面：### 说明一下双向绑定原理.简单, 手撸过. 就是面试官问到如何对div进行双向绑定有点蒙圈.当然可以后面研究了一下, 发现可以用MutationObserver这个API, 有空我更新一下仓库的例子.

   ### 如果是在HTTP环境下, 页面被插了恶意代码, 有广告, 怎么办这个问题很有意思, 那不外乎是如何识别, 还有识别到该怎么办.识别可以在客户端算下html的hash,
    然后服务端给个接口返回这个html的实际hash, 两个hash不一致就是被插了恶意代码.如何去广告我的方案不是太好: 给所有合法的元素都加上id, 然后对DOM更新监听,
    如果更新的DOM不带有这个id, 说明是广告, 直接去除.现在回想一下, 可以考虑遍历script标签, 有没有不在白名单内的, 但也不是个好方案

   ### 混合应用开发, js与原生应用通信没做过, 不知道当然还有一些很基础的题目, 如XHR怎么用, HTTP的status code, method, 缓存相关的头, TCP,
   首屏优化的方案, HTTP/2解决了什么问题. 这都很简单, 没什么好说的.

   面试官的问题：

   问## 一面 好巧, 就是电话面试那位. ### 又问了一次XHR怎么用 然后我表示在这之上的进行封装会更重要, 如实现promise, 设计中间件, 与方便的错误处理更加重要, 然后举了自己项目中的例子. ### jsonp如何判断加载是否成功 还真不知道, 只知道onLoad和onError, 但是onLoad触发未必是成功. 思考了一番script的其他事件, 没啥头绪, 表示要去MDN找找. 找了一下, 要和readyState配合一下判断 ### 上次后有没有了解过js和原生引用调用 行吧, 我是个喜欢总结失误的人. 简单说了一下最近准备的内容, 对jsbridge的理解, 还有最近的flutter等等. ### 然后指着笔试题上code review的问题问我什么原理 页面上有多个地方绑了window.onload, 然后是onload什么时候触发, 我记得不太清.

   答### 算法 把一个链表第p到第q个节点的顺序反转 就是链表反转升级版, 没啥好说的, 生病了脑子迷糊, 强行冷静下来后好好写就出来了. 就是用解构赋值用于交换, 面试官似乎不太理解. 行吧, 用传统方式写一个swap, 给面试官解释清楚了, 问题不大.


11.
web worker，web worker是运行在浏览器后台的js程序，他不影响主程序的运行，是另开的一个js线程，可以用这个线程执行复杂的数据操作，然后把操作结果通过postMessage传递给主线程，这样在进行复杂且耗时的操作时就不会阻塞主线程了。

（3）对html5的语义话的理解html5的语义化指的是用正确的标签包含正确的内容，比如nav标签，里面就应该包含导航条的内容，而不是用做其他的用途，标签语义化的好处就是结构良好，便于阅读，方便威化，也有利于爬虫的查找，提高搜索率。

（4）cookie，sessionStorage，localeStorage的区别。

（5）多个页面之间如何进行通信使用cookie，使用web worker，使用localeStorage和sessionStorage

（6）浏览器的渲染过程。
    DOM Tree：浏览器将HTML解析成树形的数据结构。

　　CSS Rule Tree：浏览器将CSS解析成树形的数据结构。

　　Render Tree: DOM和CSSOM合并后生成Render Tree。

　　layout: 有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系，从而去计算出每个节点在屏幕中的位置。

　　painting: 按照算出来的规则，通过显卡，把内容画到屏幕上。

（7）重构、回流浏览器的重构指的是改变每个元素外观时所触发的浏览器行为，
比如颜色，背景等样式发生了改变而进行的重新构造新外观的过程。重构不会引发页面的重新布局，不一定伴随着回流，
回流指的是浏览器为了重新渲染页面的需要而进行的重新计算元素的几何大小和位置的，他的开销是非常大的，
回流可以理解为渲染树需要重新进行计算，一般最好触发元素的重构，避免元素的回流。


12.xss攻击，csrf攻击，sql注入，DDos攻击。

13.webpack怎么实现打包拆包？js怎么实现鼠标拖拽？
鼠标拖拽
<script>
    var box = document.getElementsByClassName("box")[0]; //获取元素
    var x, y; //存储div的坐标
    var isDrop = false; //移动状态的判断鼠标按下才能移动
    box.onmousedown = function(e) {
        var e = e || window.event; //要用event这个对象来获取鼠标的位置
        x = e.clientX - box.offsetLeft;
        y = e.clientY - box.offsetTop;
        isDrop = true; //设为true表示可以移动
    }

    document.onmousemove = function(e) {
        //是否为可移动状态                　　　　　　　　　　　 　　　　　　　
        if(isDrop) {
            var e = e || window.event;
            var moveX = e.clientX - x; //得到距离左边距离                    　　
            var moveY = e.clientY - y; //得到距离上边距离

            var maxX = document.documentElement.clientWidth - box.offsetWidth;
            var maxY = document.documentElement.clientHeight - box.offsetHeight;

            //范围限定  当移动的距离最小时取最大  移动的距离最大时取最小
            //范围限定一
            /*if(moveX < 0) {
                moveX = 0
            } else if(moveX > maxX) {
                moveX = maxX;
            }

            if(moveY < 0) {
                moveY = 0;
            } else if(moveY > maxY) {
                moveY = maxY;
            }　*/
            //范围限定二　
            moveX=Math.min(maxX, Math.max(0,moveX));

            moveY=Math.min(maxY, Math.max(0,moveY));
            box.style.left = moveX + "px";
            box.style.top = moveY + "px";
        } else {
            return;
        }

    }

    document.onmouseup = function() {
        isDrop = false; //设置为false不可移动
    }
</script>

14.设计模式
1） 发布者订阅者模式。 eventEimitter
2）单例模式
3）工厂模式。 通过参数的不同，创建不同的类或实例
4）模块模式，封装大部分代码，只暴露必需接口
/**
 * 模块模式 = 封装大部分代码，只暴露必需接口
 */
var Car = (function(){
    var name = '法拉利';
    function sayName(){
        console.log( name );
    }
    function getColor(name){
        console.log( name );
    }
    return {
        name: sayName,
        color: getColor
    }
})();
Car.name();
Car.color('红色');

15.一个M * N的方格，从左下角走到右上角有多少种走法？
每次只能往右走，或者往上走。



这个题目其实是一个组合问题。对方向编号，向上是0，向右是1，那么从左下角走到右上角一定要经过M 个1和N个0。这个题目可以转化为从M+N个盒子中挑出M个盒子有多少种方法。



就是C(M+N, M), 或者C(M+N, N).



所以2 * 2的格子有C(2+2, 2)=6中走法,  2* 3 的格子有 C(5, 2)=10种走法


16.跨域，闭包，继承，ajax，以及用过的框架，计算机网络问的是tcp/ip的三次握手和四次挥手，

17.面试官的问题：

   问笔试题1：js里array，string的常用方法和属性等。

   答基础题了，基础一定要打好。

   问笔试题2：js编程，数组倒序。

   答其实就是一个reverse方法啊！可我当时没准备，硬生生忘记了。

   问笔试题3：http状态码有哪些，常用哪些？

   答1开头到4开头都简单答了答。

   问口头题1：网络安全了解哪些？

   答xss，csrf了解一下。

   问口头题2：浏览器缓存方式。 口头题3：跨域传输。 口头题4：突然问我做过最自豪的一件事情（懵*）。

   答答了答cookie啊localstorage什么的。 答了jsonp，还有不同子域改document.domain，还有个H5新方法。

18.1.为什么使用webpack（主要解决js的共享问题）；
2.MVVN；3.为什么选择vueJavaScript1.js数组和对象的区别；
2.数组和对象常用的方法；
3.js判断isNumber(obj)，把某一个字符串转成数组，代码越健壮越好；
4.ajax 的过程是怎样的(交互模型)；
5.闭包；
6.遍历DOM树的5种方法；
var list = []; //声明一个数组list,用来存放元素的后代元素.
 function getChildrens(ele){
        var children = ele.children;
        for(var i = 0 ; i < children.length; i++){
          var child = children[i]; //child就是这个ele函数的一个个的子元素.
          list.push(child); //把求出来的子元素存进list数组.
          //求出来的子元素,调用函数求他的子元素.
          getChildrens(child);
        }
      }
       //求body的所有后代. //遍历整个dom树.
      getChildrens(document.body);
      console.log(list);
7.JavaScript数据结构之链表的实现；
8.Js里的危险和攻击数据结构CSSHTML。

19. blob对象
Blob的英文全称是Binary Large Object，翻译成汉语是二进制大型对象。

HTML5中，Blob是一种JavaScript数据类型，用于存储二进制数据。

此对象中存储的数据没有必要非得是JavaScript原生格式数据，也就是没必要是JavaScript内部对象。

比如可以是File对象，它继承Blob对象，并扩展了一些功能。
通过url下载文件
<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta name="author" content="http://www.softwhy.com/" />
<title>蚂蚁部落</title>
<script>
function creatUrl(fileName, content){
  let blob = new Blob([content]);
  let link = document.createElement("a");
  link.innerHTML = fileName;
  link.download = fileName;
  link.href = URL.createObjectURL(blob);
  document.getElementsByTagName("body")[0].appendChild(link);
}
window.onload=function(){
  creatUrl("ant.txt","蚂蚁部落");
}
</script>
</head>
<body>
</body>
</html>

20. arrayBuffer， typedArray， dataView
（1）ArrayBuffer对象：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。

（2）TypedArray视图：共包括 9 种类型的视图，比如Uint8Array（无符号 8 位整数）数组视图, Int16Array（16 位整数）数组视图, Float32Array（32 位浮点数）数组视图等等。

（3）DataView视图：可以自定义复合格式的视图，比如第一个字节是 Uint8（无符号 8 位整数）、第二、三个字节是 Int16（16 位整数）、第四个字节开始是 Float32（32 位浮点数）等等，此外还可以自定义字节序。

const buf = new ArrayBuffer(32);
上面代码生成了一段 32 字节的内存区域，每个字节的值默认都是 0。可以看到，ArrayBuffer构造函数的参数是所需要的内存大小（单位字节）。

为了读写这段内容，需要为它指定视图。DataView视图的创建，需要提供ArrayBuffer对象实例作为参数。

const buf = new ArrayBuffer(32);
const dataView = new DataView(buf);
dataView.getUint8(0) // 0

ArrayBuffer对象作为内存区域，可以存放多种类型的数据。同一段内存，不同数据有不同的解读方式，这就叫做“视图”（view）。ArrayBuffer有两种视图，一种是TypedArray视图，另一种是DataView视图。前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。

目前，TypedArray视图一共包括 9 种类型，每一种视图都是一种构造函数。

Int8Array：8 位有符号整数，长度 1 个字节。
Uint8Array：8 位无符号整数，长度 1 个字节。
Uint8ClampedArray：8 位无符号整数，长度 1 个字节，溢出处理不同。
Int16Array：16 位有符号整数，长度 2 个字节。
Uint16Array：16 位无符号整数，长度 2 个字节。
Int32Array：32 位有符号整数，长度 4 个字节。
Uint32Array：32 位无符号整数，长度 4 个字节。
Float32Array：32 位浮点数，长度 4 个字节。
Float64Array：64 位浮点数，长度 8 个字节。

// 创建一个8字节的ArrayBuffer
const b = new ArrayBuffer(8);

// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾
const v1 = new Int32Array(b);
